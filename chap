1.3: \n 只代表一个字符， 类似于\n 的转义字符序列为表示无法输入的字符或不可见字符提供了一种通用的可扩充的机制。

1.4: 符号常量 #define 指令可以把符号名（或称为符号常量）定义为一个特定的值
        #define 名字 替换文本     (这实际上就是宏定义的一种: 替换)
    替换文本可以是任何字符序列， 而不仅限于数字。符号常量名通常用大写字母拼写， #define指令行的末尾没有分号

1.10 外部变量与作用域
        外部变量必须定义在所有函数之外， 且只能定义一次， 定以后编译程序将为它分配存储单元。在每个需要访问外部
    变量的函数中， 必须声明相应的外部变量， 此时说明类型， 声明时可以用extern 语句显示声明， 也可以通过上下文
    隐式声明。某些情况下可以省略extern声明。在源文件中， 如果外部变量的定义出现在使用它的函数之前， 那么在那
    个函数中就没必要使用extern声明, 另一方面， 如果要在外部变量的定义之前就使用该变量， 或者外部变量的定义与
    变量的使用不在同一源文件中, 则必须在相应的变量声明中强制行的使用关键子extern。
    在通常的做法中， 所有外部变量的定义都放在源文件的开始处， 这样可以省略extern声明。

    定义（define） 声明（declaration）： 定义表示创建变量或者分配存储单元， 而 声明 指的是说明变量的性质， 并不分配存储单元。

2.2 
    long int = long; short int = short; 通常人们会省略掉int

3.8 goto语句和标号,  标号的命名同变量命名的形式相同， 标号的后面要紧跟一个冒号。
        标号可以位于对应的goto语句所在函数的任何语句的前面。标号的作用域是整个函数。建议是能不用goto就不用。

4.3 外部变量(这一节最好多看几遍， 对了解C的底层有一定帮助)
            C 语言程序可以看成由一系列的外部对象构成， 这些外部对象可能是变量或函数。形容次external 与 internal 是相对的， 
        internal 用于描述定义在函数内部的函数参数以及变量。外部变量定义在函数之外， 因此可以在许多函数中使用。
        由于C语言不允许在一个函数中定义其他函数， 因此函数本身是外部的。默认情况下， 外部变量与函数具有下列性质： 通过
        同一个名字对外部变量的所有引用（即使这种引用来自于单独编译的不同函数）实际上都是引用同一个对象（标准中把这一性质称为外部连接）。
            因为外部变量可以在全局范围内访问， 这就为函数之间的数据交换提供了一种可以替代函数参数与返回的方式。任何函数都可以通过名字
        访问一个外部变量， 当然这个名字需要通过某种方式进行声明。

4.7 寄存器变量
            register 声明告诉编译器， 它所声明的变量在程序中使用频率较高。其思想是， 将register变量放在机器的寄存器中， 
        这样可以使程序更小， 执行速度更快。但编译器可以忽略此选项。
        eg:
            register int x;
            register char c;
            register 声明只适用于自动变量以及函数的形式参数。
    
4.8 程序块（这个很容易搞混啊有木有， 这个意义何在呢）
            在一个好的程序设计风格中， 应该避免出现变量名隐藏外部作用域中相同名字的情况， 
        否则， 很可能引起混乱与错误（麻蛋，那你加这种特性干嘛， 删掉不好吗?）


4.11: 预处理
        include, define


5.1 指针与地址
            一元运算符&可用于取一个对象的地址， 因此， 以下语句：
            P = &C; 
        将把C的地址赋值给变量， 我们称P为指向C的指针.地址运算符 & 只能应用于内存中的对象， 即变量与 数组元素。
        它不能用于表达式，常量或 register类型的变量。 

            一元运算符*是间接寻址或者间接引用运算符。当他作用于指针时， 将访问指针所指向的对象。

5.3 指针与数组
            数组名所代表的就是该数组最开始的一个元素的地址！！！！！。重要的事情说三遍。数组名所代表的就是该数组最开始的一个元素的地址！！！！！数组名所代表的就是该数         组最开始的一个元素的地址！！！！！
            int a[10];
            int *pa;
        所以pa = &a[0] 也可以写成以下形式: 
            pa = a;
            对数组元素a[i]的引用也可以写成 *（a+i）这种形式.在计算数组元素 a[i] 的值时， C语言实际上先将其转换为 *(a+i) 的形式， 然后再进行求值。
        
            在函数定义中， 形式参数   char s[] 和 char *s 是等价的。我们通常习惯使用后一种形式。因为它比前者更直观的表明了该参数是一个指针。

5.5 字符指针与函数
            字符串常量是一个字符数组， 例如：
                “i am a string”
            在字符串的内部表示中， 字符数组以空字符 '\0'结尾， 所以， 程序可以通过检查空字符找到字符数组的结尾。字符串常量占用的存储单元数也因此
        比双引号内的字符数大1.

            下面两个定义之间有很大的差别：
                char amessage[] = "now is the time";    /*定义一个数组*/
                char *pmessage = "now is the time";     //定义一个指针
        上述声明中， amessage是一个仅仅足以存放初始化字符串以及空字符‘\0’的一维数组。数组中的单个字符可以进行修改， 但amessage 始终指向同一个存储位置。
        另一方面， pmessage 是一个指针， 其初始值指向一个字符串常量， 之后它可以被修改以指向其他地址， 但如果试图修改字符串的内容， 结果是没有定义的。
